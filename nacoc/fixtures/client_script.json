[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PCU Assessment",
  "enabled": 1,
  "modified": "2023-03-12 17:51:28.888038",
  "module": "NACOC",
  "name": "Filter Precursor Case Officer",
  "script": "frappe.ui.form.on('PCU Assessment', {\n\tsetup: function(frm) {\n\t\tfrm.set_query(\"officer\", \"officer\", function(doc, cdt, cdn) {\n\t\t\t// let d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\t\"role_profile_name\": [\"in\", [\"Precursor Officer\", \"Precursor Manager\"]]\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "PCU Assessment",
  "enabled": 1,
  "modified": "2023-03-12 17:50:29.320711",
  "module": "NACOC",
  "name": "Filter Assigned Precursor Officer",
  "script": "frappe.ui.form.on('PCU Assessment', {\n\tsetup: function(frm) {\n\t\tfrm.set_query(\"assigned_officer\", \"assigned_officer\", function(doc, cdt, cdn) {\n\t\t\t// let d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\t\"role_profile_name\": [\"in\", [\"Precursor Officer\", \"Precursor Manager\"]]\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t},\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "MMU Vessel",
  "enabled": 1,
  "modified": "2023-08-15 10:42:04.700066",
  "module": "NACOC",
  "name": "Hide Name Column",
  "script": "frappe.listview_settings['MMU Vessel'] = {\r\n    hide_name_column: true,\r\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "MMU Vessels at Anchorage",
  "enabled": 1,
  "modified": "2024-02-08 13:23:36.233463",
  "module": "NACOC",
  "name": "Customize Map in Anchorage Doctype",
  "script": "frappe.ui.form.on('MMU Vessels at Anchorage', {\n\trefresh: function(frm) {\n        var lat = frm.doc.latitude;\n        var lng = frm.doc.longitude;\n        \n        // initialize the map on the HTML field with ID of tile\n        var map = L.map('anchorage_map').setView([lat, lng], 15);\n        // add a tile layer to add to our map\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            maxZoom: 19,\n            attribution: 'Â© OpenStreetMap'\n        }).addTo(map);\n        //add marker using latitude and longitude\n        var marker = L.marker([lat, lng]).addTo(map);\n        //attach a popup with the specified HTML content to the marker\n        //marker.bindPopup(\"<b>Last known location</b><br>\" + lat + \", \" + lng).openPopup();\n        \n        // Make the reverse call when both lat and lng are set\n        // if (lat && lng) {\n        //     frappe.call({\n        //         type: 'GET',\n        //         url: \"https://nominatim.openstreetmap.org/reverse?format=json&lat=\" + lat + \"&lon=\" + lng ,\n        //         callback: function(r) {\n        //             frm.set_value('address', r.display_name);\n        //             marker.bindPopup(\"<b>Name:</b> \" + r.display_name + \"<br> <b>Type:</b> \" + r.type).openPopup();\n        //         }\n        //     });\n        // }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "MMU Vessels at Anchorage",
  "enabled": 1,
  "modified": "2023-08-18 09:03:32.361991",
  "module": "NACOC",
  "name": "Calculate Duration of Last AIS Gap",
  "script": "frappe.ui.form.on('MMU Vessels at Anchorage', {\n\trefresh: function(frm) {\n         // Merge date_ais_turned_off and time_ais_turned_off into a datetime field\n        let turned_off = new Date(frm.doc.date_ais_turned_off + ' ' + frm.doc.time_ais_turned_off);\n\n        // Merge date_ais_turned_on and time_ais_turned_on into a datetime field\n        let turned_on = new Date(frm.doc.date_ais_turned_on + ' ' + frm.doc.time_ais_turned_on);\n\n        // Calculate duration when form is loaded\n        if (frm.doc.date_ais_turned_off && frm.doc.time_ais_turned_off && frm.doc.date_ais_turned_on && frm.doc.time_ais_turned_on) {\n            let duration = \"\";\n            let diffMs = Math.abs(turned_on - turned_off);\n            \n            let diffDays = Math.floor(diffMs / 86400000); // days\n            let diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours\n            let diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes\n            \n            let diffDaysText = diffDays > 1 ? \" days, \" : \" day, \"\n            let diffHrsText = diffHrs > 1 ? \" hours, \" : \" hour, \"\n            let diffMinsText = diffDays > 1 ? \" minutes\" : \" minutes\"\n            \n            duration = \"AIS was down for \" + diffDays + diffDaysText + diffHrs + diffHrsText + \"and \" + diffMins + diffMinsText;\n            frm.set_value('duration_of_last_ais_gap', duration);\n        }\n    },\n\n    date_ais_turned_off: function(frm) {\n        frm.trigger('refresh');\n    },\n\n    time_ais_turned_off: function(frm) {\n        frm.trigger('refresh');\n    },\n\n    date_ais_turned_on: function(frm) {\n        frm.trigger('refresh');\n    },\n\n    time_ais_turned_on: function(frm) {\n        frm.trigger('refresh');\n    }\n\t\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Import Tagging",
  "enabled": 1,
  "modified": "2023-11-08 11:20:16.681840",
  "module": "NACOC",
  "name": "Filter Aviance Officers",
  "script": "frappe.ui.form.on('Import Tagging', {\n\tsetup: function(frm) {\n\t\tfrm.set_query(\"tagging_officer\", function(doc) {\n\t\t\t// let d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\t\"role_profile_name\": [\"in\", [\"Aviance Officer\", \"Aviance Manager\"]]\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\tfrm.set_query(\"releasing_officer\", function(doc) {\n\t\t\t// let d = locals[cdt][cdn];\n\t\t\treturn {\n\t\t\t\tfilters: {\n\t\t\t\t\t\"role_profile_name\": [\"in\", [\"Aviance Officer\", \"Aviance Manager\"]]\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t},\n})",
  "view": "Form"
 }
]